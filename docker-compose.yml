services:
  aurora-backend:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
        - linux/arm/v7
    container_name: aurora-backend
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongo:27017/aurora
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - USER_PHONE_NUMBER=${USER_PHONE_NUMBER}
      - WEBHOOK_BASE_URL=${WEBHOOK_BASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
    volumes:
      - audio_temp:/tmp/audio
      - ./storage/audio:/app/storage/audio
    depends_on:
      - mongo
    networks:
      - aurora-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3000, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  aurora-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
        - linux/arm/v7
    container_name: aurora-frontend
    ports:
      - "3001:80"
    depends_on:
      - aurora-backend
    networks:
      - aurora-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  mongo:
    image: mongo:7-jammy
    container_name: aurora-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=aurora
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - aurora-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    # Resource limits for Raspberry Pi compatibility
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  audio_temp:
    driver: local

networks:
  aurora-network:
    driver: bridge